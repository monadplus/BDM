* Slide 1
* Slide 2
* Slide 3
* Slide 4
* Slide 5
* Slide 6
* Slide 7
* Slide 8
* Slide 9

MapReduce jobs are done independent and communicate using the disk.

* Slide 10

- RDD are abstract entities.
- Read-only.
- Partitioned.
- Resilient.
- Created from storage or other RDDs.

* Slide 11
* Slide 12

- Data sharing: where data is from and where is goes.
- Many operators to work with RDD (whole RDD).

* Slide 13

- Partitioning: MapReduce(configuration file) - Spark (programatically inside the code)

* Slide 14
* Slide 15
* Slide 16
* Slide 17
* Slide 18
* Slide 19
* Slide 20
* Slide 21
* Slide 22
* Slide 23
* Slide 24
* Slide 25
* Slide 26
* Slide 27

Top level:

- Yet Another Resource Negotiator (YARN)
- Master: coordinator of JVMs
- Worker: the JVMs

Inside each Worker

- Driver: coordinates tasks. Driver ask resources to YARN
- Executor: run task/store data.

* Slide 28
* Slide 29

Partitions in RDD => level of parallelism

* Slide 30
* Slide 31

Lineage graph: parents

* Slide 32

Narrow dependencies := do not change the key, mapping one to one, can be keep in memory.

Light blue square = RDD
Darker blue square = partition inside RDD

co-partitioned ~ share the same key.

* Slide 33

Wide dependencies := requires write and read from one stage to the other.

* Slide 34
* Slide 35
* Slide 36
* Slide 37
* Slide 38
* Slide 39
* Slide 40
